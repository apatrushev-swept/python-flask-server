# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CompanySettingsAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, postal_code: str=None, street_address: str=None, city: str=None, region: str=None, country: str=None):  # noqa: E501
        """CompanySettingsAddress - a model defined in Swagger

        :param postal_code: The postal_code of this CompanySettingsAddress.  # noqa: E501
        :type postal_code: str
        :param street_address: The street_address of this CompanySettingsAddress.  # noqa: E501
        :type street_address: str
        :param city: The city of this CompanySettingsAddress.  # noqa: E501
        :type city: str
        :param region: The region of this CompanySettingsAddress.  # noqa: E501
        :type region: str
        :param country: The country of this CompanySettingsAddress.  # noqa: E501
        :type country: str
        """
        self.swagger_types = {
            'postal_code': str,
            'street_address': str,
            'city': str,
            'region': str,
            'country': str
        }

        self.attribute_map = {
            'postal_code': 'postalCode',
            'street_address': 'streetAddress',
            'city': 'city',
            'region': 'region',
            'country': 'country'
        }

        self._postal_code = postal_code
        self._street_address = street_address
        self._city = city
        self._region = region
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'CompanySettingsAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The company_settings_address of this CompanySettingsAddress.  # noqa: E501
        :rtype: CompanySettingsAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this CompanySettingsAddress.


        :return: The postal_code of this CompanySettingsAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this CompanySettingsAddress.


        :param postal_code: The postal_code of this CompanySettingsAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def street_address(self) -> str:
        """Gets the street_address of this CompanySettingsAddress.


        :return: The street_address of this CompanySettingsAddress.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address: str):
        """Sets the street_address of this CompanySettingsAddress.


        :param street_address: The street_address of this CompanySettingsAddress.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def city(self) -> str:
        """Gets the city of this CompanySettingsAddress.


        :return: The city of this CompanySettingsAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this CompanySettingsAddress.


        :param city: The city of this CompanySettingsAddress.
        :type city: str
        """

        self._city = city

    @property
    def region(self) -> str:
        """Gets the region of this CompanySettingsAddress.


        :return: The region of this CompanySettingsAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this CompanySettingsAddress.


        :param region: The region of this CompanySettingsAddress.
        :type region: str
        """

        self._region = region

    @property
    def country(self) -> str:
        """Gets the country of this CompanySettingsAddress.


        :return: The country of this CompanySettingsAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this CompanySettingsAddress.


        :param country: The country of this CompanySettingsAddress.
        :type country: str
        """

        self._country = country
