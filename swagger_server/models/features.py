# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Features(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, max_locations: int=None, travel_time: bool=None, supervisors: bool=None, client_messaging: bool=None, public_surveys: bool=None, translations: bool=None, payments: bool=None, cleaning_plans: bool=None, work_period_csv: bool=None, scheduling: bool=None):  # noqa: E501
        """Features - a model defined in Swagger

        :param max_locations: The max_locations of this Features.  # noqa: E501
        :type max_locations: int
        :param travel_time: The travel_time of this Features.  # noqa: E501
        :type travel_time: bool
        :param supervisors: The supervisors of this Features.  # noqa: E501
        :type supervisors: bool
        :param client_messaging: The client_messaging of this Features.  # noqa: E501
        :type client_messaging: bool
        :param public_surveys: The public_surveys of this Features.  # noqa: E501
        :type public_surveys: bool
        :param translations: The translations of this Features.  # noqa: E501
        :type translations: bool
        :param payments: The payments of this Features.  # noqa: E501
        :type payments: bool
        :param cleaning_plans: The cleaning_plans of this Features.  # noqa: E501
        :type cleaning_plans: bool
        :param work_period_csv: The work_period_csv of this Features.  # noqa: E501
        :type work_period_csv: bool
        :param scheduling: The scheduling of this Features.  # noqa: E501
        :type scheduling: bool
        """
        self.swagger_types = {
            'max_locations': int,
            'travel_time': bool,
            'supervisors': bool,
            'client_messaging': bool,
            'public_surveys': bool,
            'translations': bool,
            'payments': bool,
            'cleaning_plans': bool,
            'work_period_csv': bool,
            'scheduling': bool
        }

        self.attribute_map = {
            'max_locations': 'maxLocations',
            'travel_time': 'travelTime',
            'supervisors': 'supervisors',
            'client_messaging': 'clientMessaging',
            'public_surveys': 'publicSurveys',
            'translations': 'translations',
            'payments': 'payments',
            'cleaning_plans': 'cleaningPlans',
            'work_period_csv': 'workPeriodCsv',
            'scheduling': 'scheduling'
        }

        self._max_locations = max_locations
        self._travel_time = travel_time
        self._supervisors = supervisors
        self._client_messaging = client_messaging
        self._public_surveys = public_surveys
        self._translations = translations
        self._payments = payments
        self._cleaning_plans = cleaning_plans
        self._work_period_csv = work_period_csv
        self._scheduling = scheduling

    @classmethod
    def from_dict(cls, dikt) -> 'Features':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The features of this Features.  # noqa: E501
        :rtype: Features
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_locations(self) -> int:
        """Gets the max_locations of this Features.


        :return: The max_locations of this Features.
        :rtype: int
        """
        return self._max_locations

    @max_locations.setter
    def max_locations(self, max_locations: int):
        """Sets the max_locations of this Features.


        :param max_locations: The max_locations of this Features.
        :type max_locations: int
        """

        self._max_locations = max_locations

    @property
    def travel_time(self) -> bool:
        """Gets the travel_time of this Features.


        :return: The travel_time of this Features.
        :rtype: bool
        """
        return self._travel_time

    @travel_time.setter
    def travel_time(self, travel_time: bool):
        """Sets the travel_time of this Features.


        :param travel_time: The travel_time of this Features.
        :type travel_time: bool
        """

        self._travel_time = travel_time

    @property
    def supervisors(self) -> bool:
        """Gets the supervisors of this Features.


        :return: The supervisors of this Features.
        :rtype: bool
        """
        return self._supervisors

    @supervisors.setter
    def supervisors(self, supervisors: bool):
        """Sets the supervisors of this Features.


        :param supervisors: The supervisors of this Features.
        :type supervisors: bool
        """

        self._supervisors = supervisors

    @property
    def client_messaging(self) -> bool:
        """Gets the client_messaging of this Features.


        :return: The client_messaging of this Features.
        :rtype: bool
        """
        return self._client_messaging

    @client_messaging.setter
    def client_messaging(self, client_messaging: bool):
        """Sets the client_messaging of this Features.


        :param client_messaging: The client_messaging of this Features.
        :type client_messaging: bool
        """

        self._client_messaging = client_messaging

    @property
    def public_surveys(self) -> bool:
        """Gets the public_surveys of this Features.


        :return: The public_surveys of this Features.
        :rtype: bool
        """
        return self._public_surveys

    @public_surveys.setter
    def public_surveys(self, public_surveys: bool):
        """Sets the public_surveys of this Features.


        :param public_surveys: The public_surveys of this Features.
        :type public_surveys: bool
        """

        self._public_surveys = public_surveys

    @property
    def translations(self) -> bool:
        """Gets the translations of this Features.


        :return: The translations of this Features.
        :rtype: bool
        """
        return self._translations

    @translations.setter
    def translations(self, translations: bool):
        """Sets the translations of this Features.


        :param translations: The translations of this Features.
        :type translations: bool
        """

        self._translations = translations

    @property
    def payments(self) -> bool:
        """Gets the payments of this Features.


        :return: The payments of this Features.
        :rtype: bool
        """
        return self._payments

    @payments.setter
    def payments(self, payments: bool):
        """Sets the payments of this Features.


        :param payments: The payments of this Features.
        :type payments: bool
        """

        self._payments = payments

    @property
    def cleaning_plans(self) -> bool:
        """Gets the cleaning_plans of this Features.


        :return: The cleaning_plans of this Features.
        :rtype: bool
        """
        return self._cleaning_plans

    @cleaning_plans.setter
    def cleaning_plans(self, cleaning_plans: bool):
        """Sets the cleaning_plans of this Features.


        :param cleaning_plans: The cleaning_plans of this Features.
        :type cleaning_plans: bool
        """

        self._cleaning_plans = cleaning_plans

    @property
    def work_period_csv(self) -> bool:
        """Gets the work_period_csv of this Features.


        :return: The work_period_csv of this Features.
        :rtype: bool
        """
        return self._work_period_csv

    @work_period_csv.setter
    def work_period_csv(self, work_period_csv: bool):
        """Sets the work_period_csv of this Features.


        :param work_period_csv: The work_period_csv of this Features.
        :type work_period_csv: bool
        """

        self._work_period_csv = work_period_csv

    @property
    def scheduling(self) -> bool:
        """Gets the scheduling of this Features.


        :return: The scheduling of this Features.
        :rtype: bool
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling: bool):
        """Sets the scheduling of this Features.


        :param scheduling: The scheduling of this Features.
        :type scheduling: bool
        """

        self._scheduling = scheduling
