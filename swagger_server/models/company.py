# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.company_settings import CompanySettings  # noqa: F401,E501
from swagger_server.models.company_twillio import CompanyTwillio  # noqa: F401,E501
from swagger_server import util


class Company(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, env: str=None, name: str=None, created_at: datetime=None, last_modified: datetime=None, active: bool=None, test_account: bool=None, twillio: CompanyTwillio=None, settings: CompanySettings=None):  # noqa: E501
        """Company - a model defined in Swagger

        :param id: The id of this Company.  # noqa: E501
        :type id: str
        :param env: The env of this Company.  # noqa: E501
        :type env: str
        :param name: The name of this Company.  # noqa: E501
        :type name: str
        :param created_at: The created_at of this Company.  # noqa: E501
        :type created_at: datetime
        :param last_modified: The last_modified of this Company.  # noqa: E501
        :type last_modified: datetime
        :param active: The active of this Company.  # noqa: E501
        :type active: bool
        :param test_account: The test_account of this Company.  # noqa: E501
        :type test_account: bool
        :param twillio: The twillio of this Company.  # noqa: E501
        :type twillio: CompanyTwillio
        :param settings: The settings of this Company.  # noqa: E501
        :type settings: CompanySettings
        """
        self.swagger_types = {
            'id': str,
            'env': str,
            'name': str,
            'created_at': datetime,
            'last_modified': datetime,
            'active': bool,
            'test_account': bool,
            'twillio': CompanyTwillio,
            'settings': CompanySettings
        }

        self.attribute_map = {
            'id': 'id',
            'env': 'env',
            'name': 'name',
            'created_at': 'createdAt',
            'last_modified': 'lastModified',
            'active': 'active',
            'test_account': 'testAccount',
            'twillio': 'twillio',
            'settings': 'settings'
        }

        self._id = id
        self._env = env
        self._name = name
        self._created_at = created_at
        self._last_modified = last_modified
        self._active = active
        self._test_account = test_account
        self._twillio = twillio
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The company of this Company.  # noqa: E501
        :rtype: Company
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Company.


        :return: The id of this Company.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Company.


        :param id: The id of this Company.
        :type id: str
        """

        self._id = id

    @property
    def env(self) -> str:
        """Gets the env of this Company.


        :return: The env of this Company.
        :rtype: str
        """
        return self._env

    @env.setter
    def env(self, env: str):
        """Sets the env of this Company.


        :param env: The env of this Company.
        :type env: str
        """

        self._env = env

    @property
    def name(self) -> str:
        """Gets the name of this Company.


        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Company.


        :param name: The name of this Company.
        :type name: str
        """

        self._name = name

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Company.


        :return: The created_at of this Company.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Company.


        :param created_at: The created_at of this Company.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def last_modified(self) -> datetime:
        """Gets the last_modified of this Company.


        :return: The last_modified of this Company.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: datetime):
        """Sets the last_modified of this Company.


        :param last_modified: The last_modified of this Company.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def active(self) -> bool:
        """Gets the active of this Company.


        :return: The active of this Company.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Company.


        :param active: The active of this Company.
        :type active: bool
        """

        self._active = active

    @property
    def test_account(self) -> bool:
        """Gets the test_account of this Company.


        :return: The test_account of this Company.
        :rtype: bool
        """
        return self._test_account

    @test_account.setter
    def test_account(self, test_account: bool):
        """Sets the test_account of this Company.


        :param test_account: The test_account of this Company.
        :type test_account: bool
        """

        self._test_account = test_account

    @property
    def twillio(self) -> CompanyTwillio:
        """Gets the twillio of this Company.


        :return: The twillio of this Company.
        :rtype: CompanyTwillio
        """
        return self._twillio

    @twillio.setter
    def twillio(self, twillio: CompanyTwillio):
        """Sets the twillio of this Company.


        :param twillio: The twillio of this Company.
        :type twillio: CompanyTwillio
        """

        self._twillio = twillio

    @property
    def settings(self) -> CompanySettings:
        """Gets the settings of this Company.


        :return: The settings of this Company.
        :rtype: CompanySettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings: CompanySettings):
        """Sets the settings of this Company.


        :param settings: The settings of this Company.
        :type settings: CompanySettings
        """

        self._settings = settings
