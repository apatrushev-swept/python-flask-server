# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.company_settings_address import CompanySettingsAddress  # noqa: F401,E501
from swagger_server.models.company_settings_payroll import CompanySettingsPayroll  # noqa: F401,E501
from swagger_server.models.company_settings_phone import CompanySettingsPhone  # noqa: F401,E501
from swagger_server import util


class CompanySettings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: CompanySettingsAddress=None, email: str=None, phone: CompanySettingsPhone=None, autoassign_managers: bool=None, payroll: CompanySettingsPayroll=None):  # noqa: E501
        """CompanySettings - a model defined in Swagger

        :param address: The address of this CompanySettings.  # noqa: E501
        :type address: CompanySettingsAddress
        :param email: The email of this CompanySettings.  # noqa: E501
        :type email: str
        :param phone: The phone of this CompanySettings.  # noqa: E501
        :type phone: CompanySettingsPhone
        :param autoassign_managers: The autoassign_managers of this CompanySettings.  # noqa: E501
        :type autoassign_managers: bool
        :param payroll: The payroll of this CompanySettings.  # noqa: E501
        :type payroll: CompanySettingsPayroll
        """
        self.swagger_types = {
            'address': CompanySettingsAddress,
            'email': str,
            'phone': CompanySettingsPhone,
            'autoassign_managers': bool,
            'payroll': CompanySettingsPayroll
        }

        self.attribute_map = {
            'address': 'address',
            'email': 'email',
            'phone': 'phone',
            'autoassign_managers': 'autoassignManagers',
            'payroll': 'payroll'
        }

        self._address = address
        self._email = email
        self._phone = phone
        self._autoassign_managers = autoassign_managers
        self._payroll = payroll

    @classmethod
    def from_dict(cls, dikt) -> 'CompanySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The company_settings of this CompanySettings.  # noqa: E501
        :rtype: CompanySettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> CompanySettingsAddress:
        """Gets the address of this CompanySettings.


        :return: The address of this CompanySettings.
        :rtype: CompanySettingsAddress
        """
        return self._address

    @address.setter
    def address(self, address: CompanySettingsAddress):
        """Sets the address of this CompanySettings.


        :param address: The address of this CompanySettings.
        :type address: CompanySettingsAddress
        """

        self._address = address

    @property
    def email(self) -> str:
        """Gets the email of this CompanySettings.


        :return: The email of this CompanySettings.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CompanySettings.


        :param email: The email of this CompanySettings.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> CompanySettingsPhone:
        """Gets the phone of this CompanySettings.


        :return: The phone of this CompanySettings.
        :rtype: CompanySettingsPhone
        """
        return self._phone

    @phone.setter
    def phone(self, phone: CompanySettingsPhone):
        """Sets the phone of this CompanySettings.


        :param phone: The phone of this CompanySettings.
        :type phone: CompanySettingsPhone
        """

        self._phone = phone

    @property
    def autoassign_managers(self) -> bool:
        """Gets the autoassign_managers of this CompanySettings.


        :return: The autoassign_managers of this CompanySettings.
        :rtype: bool
        """
        return self._autoassign_managers

    @autoassign_managers.setter
    def autoassign_managers(self, autoassign_managers: bool):
        """Sets the autoassign_managers of this CompanySettings.


        :param autoassign_managers: The autoassign_managers of this CompanySettings.
        :type autoassign_managers: bool
        """

        self._autoassign_managers = autoassign_managers

    @property
    def payroll(self) -> CompanySettingsPayroll:
        """Gets the payroll of this CompanySettings.


        :return: The payroll of this CompanySettings.
        :rtype: CompanySettingsPayroll
        """
        return self._payroll

    @payroll.setter
    def payroll(self, payroll: CompanySettingsPayroll):
        """Sets the payroll of this CompanySettings.


        :param payroll: The payroll of this CompanySettings.
        :type payroll: CompanySettingsPayroll
        """

        self._payroll = payroll
