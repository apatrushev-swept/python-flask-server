# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.features import Features  # noqa: F401,E501
from swagger_server.models.plan import Plan  # noqa: F401,E501
from swagger_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, company: str=None, plan: Plan=None, overwrites: Features=None, created_at: str=None, last_modified: str=None, starts_at: str=None, expires_at: str=None, active: bool=None):  # noqa: E501
        """Subscription - a model defined in Swagger

        :param id: The id of this Subscription.  # noqa: E501
        :type id: str
        :param company: The company of this Subscription.  # noqa: E501
        :type company: str
        :param plan: The plan of this Subscription.  # noqa: E501
        :type plan: Plan
        :param overwrites: The overwrites of this Subscription.  # noqa: E501
        :type overwrites: Features
        :param created_at: The created_at of this Subscription.  # noqa: E501
        :type created_at: str
        :param last_modified: The last_modified of this Subscription.  # noqa: E501
        :type last_modified: str
        :param starts_at: The starts_at of this Subscription.  # noqa: E501
        :type starts_at: str
        :param expires_at: The expires_at of this Subscription.  # noqa: E501
        :type expires_at: str
        :param active: The active of this Subscription.  # noqa: E501
        :type active: bool
        """
        self.swagger_types = {
            'id': str,
            'company': str,
            'plan': Plan,
            'overwrites': Features,
            'created_at': str,
            'last_modified': str,
            'starts_at': str,
            'expires_at': str,
            'active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'company': 'company',
            'plan': 'plan',
            'overwrites': 'overwrites',
            'created_at': 'createdAt',
            'last_modified': 'lastModified',
            'starts_at': 'startsAt',
            'expires_at': 'expiresAt',
            'active': 'active'
        }

        self._id = id
        self._company = company
        self._plan = plan
        self._overwrites = overwrites
        self._created_at = created_at
        self._last_modified = last_modified
        self._starts_at = starts_at
        self._expires_at = expires_at
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def company(self) -> str:
        """Gets the company of this Subscription.


        :return: The company of this Subscription.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this Subscription.


        :param company: The company of this Subscription.
        :type company: str
        """

        self._company = company

    @property
    def plan(self) -> Plan:
        """Gets the plan of this Subscription.


        :return: The plan of this Subscription.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan: Plan):
        """Sets the plan of this Subscription.


        :param plan: The plan of this Subscription.
        :type plan: Plan
        """

        self._plan = plan

    @property
    def overwrites(self) -> Features:
        """Gets the overwrites of this Subscription.


        :return: The overwrites of this Subscription.
        :rtype: Features
        """
        return self._overwrites

    @overwrites.setter
    def overwrites(self, overwrites: Features):
        """Sets the overwrites of this Subscription.


        :param overwrites: The overwrites of this Subscription.
        :type overwrites: Features
        """

        self._overwrites = overwrites

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Subscription.


        :return: The created_at of this Subscription.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Subscription.


        :param created_at: The created_at of this Subscription.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def last_modified(self) -> str:
        """Gets the last_modified of this Subscription.


        :return: The last_modified of this Subscription.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: str):
        """Sets the last_modified of this Subscription.


        :param last_modified: The last_modified of this Subscription.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def starts_at(self) -> str:
        """Gets the starts_at of this Subscription.


        :return: The starts_at of this Subscription.
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at: str):
        """Sets the starts_at of this Subscription.


        :param starts_at: The starts_at of this Subscription.
        :type starts_at: str
        """

        self._starts_at = starts_at

    @property
    def expires_at(self) -> str:
        """Gets the expires_at of this Subscription.


        :return: The expires_at of this Subscription.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: str):
        """Sets the expires_at of this Subscription.


        :param expires_at: The expires_at of this Subscription.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def active(self) -> bool:
        """Gets the active of this Subscription.


        :return: The active of this Subscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Subscription.


        :param active: The active of this Subscription.
        :type active: bool
        """

        self._active = active
